// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`transformExpression keep this 1`] = `"(this.x)"`;

exports[`transformExpression loose data member ignore member computed function 1`] = `"(data.x[data.y.q].join($getLooseDataMember(data.q, \\"a\\")) + $getLooseDataMember(data.z, \\"a\\"))"`;

exports[`transformExpression loose data member ignore member function 1`] = `"(data.x.y.join($getLooseDataMember(data.q, \\"a\\")) + $getLooseDataMember(data.z, \\"a\\"))"`;

exports[`transformExpression loose data member support [] member 1`] = `"($getLooseDataMember(data.x, data.a, \\"b\\"))"`;

exports[`transformExpression loose data member support expression member 1`] = `"($getLooseDataMember(data.x, \\"a\\") + $getLooseDataMember(data.x, data.b))"`;

exports[`transformExpression loose data member support interpolate member 1`] = `"'1' + ($getLooseDataMember(data.x, data.a, \\"b\\")) + '2'"`;

exports[`transformExpression loose data member support simple 1`] = `"(data.x)"`;

exports[`transformExpression loose data member support simple member 1`] = `"($getLooseDataMember(data.x, \\"a\\"))"`;

exports[`transformExpression member expression support [] 1`] = `"(data.x[data.a].b)"`;

exports[`transformExpression member expression support interpolate 1`] = `"'1' + (data.x[data.a].b) + '2'"`;

exports[`transformExpression member expression support member function 1`] = `"(data.x.y.join(\\",\\"))"`;

exports[`transformExpression member expression support simple 1`] = `"(data.x.a)"`;

exports[`transformExpression object support shorthand 1`] = `"(({ x: data.x, y: data.y }))"`;

exports[`transformExpression object support simple 1`] = `"(({ x: data.y }))"`;

exports[`transformExpression object support spread 1`] = `"(({ ...data.x, y: data.y }))"`;

exports[`transformExpression support array 1`] = `"([data.x, 2])"`;

exports[`transformExpression support forceObject 1`] = `"(({ x: data.x }))"`;

exports[`transformExpression support interpolate 1`] = `"'1-' + (data.x + data.y) + '-2'"`;

exports[`transformExpression support interpolate 2 1`] = `"(data.x + data.y) + '-2'"`;

exports[`transformExpression support literal 1`] = `"'x'"`;

exports[`transformExpression support logic 1`] = `"(data.x > 5)"`;

exports[`transformExpression support simple 1`] = `"(data.x)"`;

exports[`transformExpression support spread 1`] = `"(({ ...data.x }))"`;

exports[`transformExpression support string 1`] = `"(\\"hello\\" + data.x)"`;

exports[`transformExpression support ternary 1`] = `"(data.flag ? true : false)"`;
