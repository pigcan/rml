// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MLTransformer include support simple 1`] = `
"import React from 'react';
import $render$1 from 'a.rml';

export default function render(data) {
  return (
    <div>
      { $render$1.apply(this, arguments) }
    </div>
  );
};"
`;

exports[`MLTransformer include support standalone 1`] = `
"import React from 'react';
import $render$1 from 'z';
import $render$2 from './z';

export default function render(data) {
  return (
    [
    $render$1.apply(this, arguments)
    ,
    $render$2.apply(this, arguments)
    ,
    ]
  );
};"
`;

exports[`MLTransformer template pure only allow one child 1`] = `
"import React from 'react';

let $templates$ = {};
export const $ownTemplates$ = {};
$ownTemplates$['t'] = function (data) {
  return (
    [
    <div>
      {(data.z)}
    </div>
    ,
    <div>
      {(data.z)}
    </div>
    ,
    ]
  );
};

class $ReactClass_t extends React.PureComponent {
  render() {
    const children = $ownTemplates$['t'].call(this.props.children, this.props);
    if(React.Children.count(children) > 1) {
      throw new Error('template \`t\` can only has one render child!');
    }
    return children;
  }
}
$ownTemplates$['t'].Component = $ReactClass_t;

$templates$ = $ownTemplates$;
export default function render(data) {
  return (
    <div>
      { React.createElement($templates$[(data.x % 2 ? 't' : 'z')].Component, (({ ...data.o })), this) }
    </div>
  );
};"
`;

exports[`MLTransformer template support import 1`] = `
"import React from 'react';
import { $ownTemplates$ as $ownTemplates$1 } from 'a.rml';
import { $ownTemplates$ as $ownTemplates$2 } from './a.rml';

let $templates$ = {};
export const $ownTemplates$ = {};
$ownTemplates$['t'] = function (data) {
  return (
    <div>
      {(data.z)}
    </div>
  );
};
$templates$ = Object.assign($templates$, $ownTemplates$1 ,$ownTemplates$2, $ownTemplates$);
export default function render(data) {
  return (
    <div>
      { $templates$['t'].call(this, (({ o: data.o }))) }
    </div>
  );
};"
`;

exports[`MLTransformer template support import absolute 1`] = `
"import React from 'react';
import { $ownTemplates$ as $ownTemplates$1 } from '../../a.rml';

let $templates$ = {};
export const $ownTemplates$ = {};
$templates$ = Object.assign($templates$, $ownTemplates$1, $ownTemplates$);
export default function render(data) {
  return (
null
  );
};"
`;

exports[`MLTransformer template support pure 1`] = `
"import React from 'react';

let $templates$ = {};
export const $ownTemplates$ = {};
$ownTemplates$['t'] = function (data) {
  return (
    <div>
      {(data.z)}
    </div>
  );
};

class $ReactClass_t extends React.PureComponent {
  render() {
    const children = $ownTemplates$['t'].call(this.props.children, this.props);
    if(React.Children.count(children) > 1) {
      throw new Error('template \`t\` can only has one render child!');
    }
    return children;
  }
}
$ownTemplates$['t'].Component = $ReactClass_t;

$templates$ = $ownTemplates$;
export default function render(data) {
  return (
    <div>
      { React.createElement($templates$[(data.x % 2 ? 't' : 'z')].Component, (({ ...data.o })), this) }
    </div>
  );
};"
`;

exports[`MLTransformer template support simple 1`] = `
"import React from 'react';

let $templates$ = {};
export const $ownTemplates$ = {};
$ownTemplates$['t'] = function (data) {
  return (
    <div>
      {(data.z)}
    </div>
  );
};
$templates$ = $ownTemplates$;
export default function render(data) {
  return (
    <div>
      { $templates$[(data.x % 2 ? 't' : 'z')].call(this, (({ ...data.o }))) }
    </div>
  );
};"
`;

exports[`MLTransformer template support standalone 1`] = `
"import React from 'react';
import { $ownTemplates$ as $ownTemplates$1 } from './q';
import { $ownTemplates$ as $ownTemplates$2 } from 'q';

let $templates$ = {};
export const $ownTemplates$ = {};
$templates$ = Object.assign($templates$, $ownTemplates$1 ,$ownTemplates$2, $ownTemplates$);
export default function render(data) {
  return (
    $templates$['z'].call(this, undefined)
  );
};"
`;

exports[`MLTransformer template support standalone array 1`] = `
"import React from 'react';
import { $ownTemplates$ as $ownTemplates$1 } from 'q';
import { $ownTemplates$ as $ownTemplates$2 } from './q';

let $templates$ = {};
export const $ownTemplates$ = {};
$templates$ = Object.assign($templates$, $ownTemplates$1 ,$ownTemplates$2, $ownTemplates$);
export default function render(data) {
  return (
    [
    $templates$['z'].call(this, undefined)
    ,
    <view>
    </view>
    ,
    ]
  );
};"
`;
